server {
    listen $PORT;
    index index.php index.html;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/html/public;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    location / {
        try_files $uri $uri/ /index.php?$query_string;
        gzip_static on;
    }
}

## Steps to Deploy on Render

1. **Create a Render account**
   - Sign up at [render.com](https://render.com) if you don't already have an account

2. **Push your code to a Git repository**
   - Make sure your code (including the Dockerfile and docker-compose.yml) is pushed to GitHub, GitLab, or Bitbucket

3. **Create a new Web Service on Render**
   - Log in to your Render dashboard
   - Click "New" and select "Web Service"
   - Connect your Git repository
   - Select the repository containing your Laravel application

4. **Configure the Web Service**
   - Select "Docker" as the environment
   - Render will automatically detect your Dockerfile
   - Set the following configuration:
     - Name: Choose a name for your service (e.g., "ast-interview")
     - Region: Choose a region closest to your users
     - Branch: Select your main branch (e.g., "main" or "master")
     - Root Directory: Leave blank if your Dockerfile is in the root directory
     - Environment Variables: Add your Laravel environment variables (DB_HOST, DB_DATABASE, etc.)

5. **Database Setup**
   - In the Render dashboard, create a new PostgreSQL database (Render doesn't offer MySQL)
   - After creating the database, note the connection details
   - Update your environment variables in the Web Service to use the Render PostgreSQL database

6. **Update your Dockerfile for Render**
   - Render requires your container to listen on the port specified by the `PORT` environment variable
   - Update your Nginx configuration to use this port

Here's an updated Nginx configuration file for Render:
```ini
server {
    listen ${PORT:-80};
    index index.php index.html;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/html/public;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    location / {
        try_files $uri $uri/ /index.php?$query_string;
        gzip_static on;
    }
}
```
